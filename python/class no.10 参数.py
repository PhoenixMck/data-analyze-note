# 参数可以输入函数，也可以作为函数的返回值
# 魔法参数：*args表示任何多个无名参数，它实际会存为一个tuple，但不用以tuple方式输入，直接输入值即可，会按顺序匹配到对应位置上【索引】；**kwargs表示关键字参数，它是一个 dict，用赋值形式输入，得到字典。
# 同时使用*args和**kwargs时，必须*args参数列要在**kwargs前
# 都是可变参数，并不是必须写成*args 和**kwargs。 只有变量前面的 *(星号)才是必须的.
# 可以用来直接生成字典、元组
def buliding(*args, **kwargs):
    # *用于标识类别，后面的是参数名
    return args, kwargs


print(buliding(1, 2, 3, 4, a=7, b=8, c=9))  # 【会生成一个包含args元组和kwargs字典的元组】


# 形式参数:就是在定义函数或过程的时候命名的参数。通俗讲就是一个记号。
# 实际参数:就是在执行时,调用函数或过程时,传递给函数或过程的参数，通俗讲就是实际值。
def sample(x, y):
    print("x=", x, "\ny=", y)  # \n要在引号里，而且引号后的逗号会自动带一个空行


# 位置参数：函数在调用时按实际参数输入的顺序来确定参数的位置，*代表形式参数是位置的性质，*args用来收集【包裹】不定长的位置参数，args是变量名
sample(1, 2)


def sample_1(x, *args):
    print("x=", x, "\nargs=", args)
    print(args[0])  # *args背后意味不定长实参以元组的形式输入函数，可以使用索引调用每个参数,
    for k in args:
        print(k)  # 也可以使用映射调用


sample_1(1, 2, 3, 4, 5)  # 函数在被调用时，按输入顺序分配位置参数，优先不带*的参数，在把其余的以元组形式输入不定长的位置参数args，kwargs同理

# 关键字参数：函数在调用时按实际参数输入时的声明来确定参数，即指定哪个参数值赋给哪个形参，调用时所传参数的位置可以任意**代表形式参数是关键字的性质，**kwargs用来收集【包裹】不定长的位置参数，kwargs是变量名
sample(x=1, y=2)

# 解包裹参数：*和**，也可以在函数调用的时候使用，称之为解包裹(unpacking)
k = (6, 8)
sample(*k)
p = {"x": 1, "y": 2}  # 数量要匹配，名字要匹配，但是顺序可以随意
sample(**p)

# 形参和实参要保证数量、位置和类型相符，位置不对，类型一致不会抛异常的
# 用于定义函数，为参数提供默认值，调用函数时可传可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用），默认参数的赋值只会在函数定义的时候绑定一次，默认值不会再被修改，但可以在调用时一次性赋上其他值

# 常见函数参数输入顺序：先位置参数，默认参数，*位置，**关键字，即(a,b=1,*args,**kwargs(定义和调用都应遵循)
